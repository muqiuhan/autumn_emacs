b
b
(hello-world)
(define factorial
    (lambda (n)))
(define factorial
    (lambda (n)
      (if (= n 0)
          1
          (* n (factorial (- n 1))))))
(factorial 5)
(define is-even?
    (lambda (n)
      (if (= n 0)
          #t
          (is-odd? (- n 1)))))
(define is-odd?
    (lambda (n)
      (if (= n 0)
          #t
          (is-even? (- n 1)))))
(is-even? 10)
(is-even? 1)
(is-even? 11)
(define (odd-or-even? number)
    (letrec ((local-even? (lambda (n)
                            (if (= n 0)
                                #t
                                (local-odd? (- n 1)))))
             (local-odd? (lambda (n)
                           (if (= n 0)
                               #f
                               (local-even? (- n 1)))))))
    (local-even? number))
(define (odd-or-even? number)
    (letrec ((local-even? (lambda (n)
                            (if (= n 0)
                                #t
                                (local-odd? (- n 1)))))
             (local-odd? (lambda (n)
                           (if (= n 0)
                               #f
                               (local-even? (- n 1))))))
      (local-even? number)))
(odd-or-even? 10)
(odd-or-even? 11)
(letrec ((countdown (lambda (i)
                        (if (= i 0)
                            'liftoff
                            (begin
                              (display i)
                              (newline)
                              (countdown (- i 1)))))))
    (countdown 19))
(define var '(jack))
var
(define var (list jack))
(define var '(jack))
(symbol? (car var))
(symbol? (car '(jack)))
(let (jack 1)
    (= (list jack) '(jack)))
(let ([jack 1])
    (= (list jack) '(jack)))
(let ([jack 1])
    (eq? (list jack) '(jack)))
(let* ([jack 1]
         [list-1 (list jack)]
         [list-2 '(jack)])
    (display (car list-1))
    (newline)
    (display (car list-2))
    (newline)
    (eq? list-1 list-2))
(define (list-position value find-list)
    (let ([loop (lambda ([i 0] [l find-list])
                  (if (null? l)
                      #f
                      (if (eqv? (car l) value)
                          i
                          (loop (+ i 1) (cdr l)))))])
      (loop value find-list)))
(list-position (list 1 2 3 4 5) 1)
(define (list-position value find-list)
    (let ([loop (lambda (i l)
                  (if (null? l)
                                   #f
                                   (if (eqv? (car l) value)
                          i
                          (loop (+ i 1) (cdr l)))))])
      (loop 0 find-list)))
(list-position (list 1 2 3 4 5) 1)
(list-position 1 (list 1 2 3 4 5))
(list-position 2 (list 1 2 3 4 5))
(define (list-position value find-list)
    (letrec ([loop (lambda ([i 0] [l find-list])
                     (if (null? l)
                         #f
                         (if (eqv? (car l) value)
                             i
                             (loop (+ i 1) (cdr l)))))])
      (loop)))
(list-position 1 (list 1 2 3 4 5))
(list-position 2 (list 1 2 3 4 5))
empty
(cons 'Mercury '())
(define empty '())
empty
(cons 'Mercury empty)
(define pair (cons 'Mercury empty))
(first pair)
(define first car)
(first pair)
(define rest cdr)
(second pair)
(rest pair)
(define (hours->wages alon)
    (cond
      [(empty? alon) empty]
      [else (cons (wage (car alon)) (hours->wages (cdr alon)))]))
(define (wage h)
    (* 12 h))
